import { and, eq } from 'drizzle-orm';

import { DB } from '../db';
import { authProviderTable, usersTable } from '../db/tables';

export interface User {
	id: string;
	givenName: string;
	familyName: string;
}

// #region Create User
/**
 * Generate the user
 *
 * > [!NOTE]
 * > This does not add the email address to the database, you have to do that yourself
 *
 * @param user the new User to create, don't include ID, this is generated by DrizzleORM
 * @returns the new User, including the ID
 */
export const createUser = async (user: Omit<User, 'id'>): Promise<User> => {
	const [newUser] = await DB.insert(usersTable).values(user).returning();

	return newUser;
};
// #endregion

export const lookupUserIdFromOAuthProvider = async (providerId: string, provider: string) => {
	const [userRecord] = await DB.select({
		userId: authProviderTable.userId
	})
		.from(authProviderTable)
		.where(and(eq(authProviderTable.type, provider), eq(authProviderTable.ref, providerId)));

	if (userRecord) {
		return userRecord.userId;
	} else {
		return null;
	}
};
